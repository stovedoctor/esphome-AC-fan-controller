esphome:
  name: esp32-test

esp32:
  board: esp32dev # Hiletgo esp32-DevKitc-32   esp-32d esp-32 cp2012 usbc board
  framework:
    type: arduino

api:

ota:
  platform: esphome

logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none

web_server:
  version: 3
  port: 80

captive_portal:

output:
  - platform: ac_dimmer
    id: pellet_fan_dimmer
    gate_pin: GPIO16
    zero_cross_pin:
      number: GPIO19
    method: LEADING
    min_power: 42%  # Minimum power level set to 42%

one_wire:
  - platform: gpio
    pin: GPIO4

sensor:
  - platform: dallas_temp # DS18b20 3 pin wire digital thermometer
    address: 0xc00000004421a328
    id: dallastemp3
    name: "stove fan temperature"
    icon: "mdi:thermometer"
    device_class: "temperature"
    unit_of_measurement: "Â°C"
    accuracy_decimals: 2
    update_interval: 60s  # Updated interval to 60 seconds

  - platform: template
    name: "Fan Speed"
    id: fan_speed
    unit_of_measurement: "%"
    accuracy_decimals: 0

text_sensor:
  - platform: template
    name: "Fan Speed Level"
    id: fan_speed_level

  - platform: template
    name: "Fan Status"
    id: fan_status

select:
  - platform: template
    name: "Fan Speed Level"
    id: fan_speed_select
    options:
      - "Off"
      - "Low"
      - "Medium-Low"
      - "Medium"
      - "Medium-High"
      - "High"
    optimistic: true
    initial_option: "Off"
    set_action:
      - lambda: |-
          if (x == "Off") {
            id(pellet_fan_dimmer).set_level(0.0);
            id(fan_status).publish_state("Off");
            id(fan_speed).publish_state(0);
            id(fan_speed_level).publish_state("Off");

          } else if (x == "Low") {
            id(pellet_fan_dimmer).set_level(0.35);  // Updated speed level 1 to 0.35
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(35);  // Adjusted percentage to match the level
            id(fan_speed_level).publish_state("Low");

          } else if (x == "Medium-Low") {
            id(pellet_fan_dimmer).set_level(0.4);
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(40);
            id(fan_speed_level).publish_state("Medium-Low");

          } else if (x == "Medium") {
            id(pellet_fan_dimmer).set_level(0.5);  // Updated speed level 3 to 0.5
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(50);  // Adjusted percentage to match the level
            id(fan_speed_level).publish_state("Medium");

          } else if (x == "Medium-High") {
            id(pellet_fan_dimmer).set_level(0.7);  // Updated speed level 4 to 0.7
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(70);  // Adjusted percentage to match the level
            id(fan_speed_level).publish_state("Medium-High");
            
          } else if (x == "High") {
            id(pellet_fan_dimmer).set_level(1.0);
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(100);
            id(fan_speed_level).publish_state("High");
          }

# Temperature ranges and Fan on or off controlled with Lambda below 
# Adjust fan speed with set_level(0.35) = 35% to fine-tune fan speed percentage at each 1 to 5 step. Level 1 would be 35%

# Match the fan speed set action for set level and published % state in the above lambda "Low", "Medium-Low" etc. to the settings below

interval:
  - interval: 31s
    then:
      - lambda: |-
          float temp = id(dallastemp3).state;  
          if (temp < 31.5) // Off state for when stove is cooling down shut off at 31.5 
          {
            id(pellet_fan_dimmer).set_level(0.0);  
            id(fan_status).publish_state("Off");
            id(fan_speed).publish_state(0);
            id(fan_speed_level).publish_state("Off");

            // When STOVE is starting up and running, fan will turn on and run on low (35%) at above 33 then increase speeds with temperature ranges
          } else if (temp >= 33 && temp <= 36)  {
            id(pellet_fan_dimmer).set_level(0.35);  // Updated speed level 1 to 0.35
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(35);  // Adjusted percentage to match the level
            id(fan_speed_level).publish_state("Low");

          } else if (temp > 36 && temp <= 45) {
            id(pellet_fan_dimmer).set_level(0.4);
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(40);
            id(fan_speed_level).publish_state("Medium-Low");

          } else if (temp > 45 && temp <= 50) {
            id(pellet_fan_dimmer).set_level(0.5);  // Updated speed level 3 to 0.5
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(50);  // Adjusted percentage to match the level
            id(fan_speed_level).publish_state("Medium");

          } else if (temp > 50 && temp <= 60) {
            id(pellet_fan_dimmer).set_level(0.7);  // Updated speed level 4 to 0.7
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(70);  // Adjusted percentage to match the level
            id(fan_speed_level).publish_state("Medium-High");
            
          } else if (temp > 60) {
            id(pellet_fan_dimmer).set_level(1.0);
            id(fan_status).publish_state("On");
            id(fan_speed).publish_state(100);
            id(fan_speed_level).publish_state("High");
          }

# Create a binary sensor to track if the fan has been off for at least 10 minutes
binary_sensor:
  - platform: template
    name: "Fan Off for 10 Minutes"
    id: fan_off_10_min
    lambda: |-
      return id(fan_status).state == "Off";
    filters:
      - delayed_on: 600s  # 10 minutes

# Automation to reboot the device a few times a day if the fan has been off for at least 10 minutes
interval:
  - interval: 8h  # Run this every 8 hours
    then:
      if:
        condition:
          binary_sensor.is_on: fan_off_10_min
        then:
          - logger.log: "Fan has been off for 10 minutes. Rebooting device."
          - delay: 5s  # Short delay before rebooting
          - switch.turn_on: restart_switch

# Switch to trigger a reboot
switch:
  - platform: restart
    name: "Restart Switch"
    id: restart_switch
